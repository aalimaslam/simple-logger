const fs=require("fs"),path=require("path");class Logger{#a;#b;#c;#d;constructor({type:e="console",pathToLog:t=path.join(__dirname,"logs"),size:s=5242880}){this.#a=e,this.#b=path.resolve(t),this.#c=s,this.#d=this.#e()}#f="[type] - [date] - [message]";#g=["error","debug","info"];#e(){fs.existsSync(this.#b)||fs.mkdirSync(this.#b,{recursive:!0});for(let e=0;e<Number.MAX_SAFE_INTEGER;e++){let t=path.join(this.#b,`log${e}.log`);if(!fs.existsSync(t))return fs.writeFileSync(t,""),fs.createWriteStream(t,{flags:"a"});let s=fs.statSync(t);if(s.size<this.#c)return fs.createWriteStream(t,{flags:"a"})}throw Error("Failed to create a new log file.")}#h(i,r){if(!this.#g.includes(i.toLowerCase()))throw Error("Invalid Log Level");let o=this.#f.replace("[type]",i).replace("[date]",new Date().toISOString()).replace("[message]",r.toString());if("file"===this.#a){this.#d.write(o+"\n");let l=fs.fstatSync(this.#d.fd);l.size>=this.#c&&(this.#d.end(),this.#d=this.#e())}console.log(o)}error(e){this.#h("error",e)}info(e){this.#h("info",e)}debug(e){this.#h("debug",e)}}module.exports=Logger;
