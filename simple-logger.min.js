const fs=require("fs"),path=require("path");class Logger{#a;#b;#c;#d;constructor(t="console",e=path.join(__dirname,"/logs"),s=5242880){this.#a=t,this.#b=e,this.#c=s,this.#d=this.#e()}#f="[type] - date - message";#g=["error","debug","info"];#e(){fs.existsSync(this.#b)||fs.mkdirSync(this.#b,{recursive:!0});let t=0;for(;;){let e=path.join(this.#b,`log${t}.log`);if(!fs.existsSync(e))return fs.writeFileSync(e,""),fs.createWriteStream(e,{flags:"a"});let s=fs.statSync(e);if(s.size<this.#c)return fs.createWriteStream(e,{flags:"a"});t++}}#h(i,r){if(!this.#g.find(t=>t.toLowerCase()==i.toLowerCase()))throw Error("Invalid Type");if(this.#b.split("").find(t=>"."==t))throw Error("Invalid Path");let o=`${this.#f.replace("type",i).replace("date",new Date().toISOString().split("T")[0]+" "+new Date().toISOString().split("T")[1].split("Z")[0]).replace("message",r.toString())}
`;if("file"==this.#a){this.#d.write(o);let l=fs.statSync(this.#d.path);l.size>=this.#c&&(this.#d=this.#e())}console.log(o)}error(t){this.#h("error",t)}info(t){this.#h("info",t)}debug(t){this.#h("debug",t)}}module.exports=Logger;
