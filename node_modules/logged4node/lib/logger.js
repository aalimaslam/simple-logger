const fs=require("fs"),path=require("path");class Logger{#a;#b;#c;#d;constructor({type:e="console",pathToLog:t=path.join(process.cwd(),"logs"),size:s=5242880}){this.#a=e,this.#b=this.#e(t),this.#c=s,this.#d=this.#f()}#g="[type] - [date] - [message]";#h=["error","debug","info"];#e(e){let t=path.resolve(e);if(!t.startsWith(path.resolve(process.cwd())))throw Error("Invalid log path");return t}#f(){try{fs.existsSync(this.#b)||fs.mkdirSync(this.#b,{recursive:!0});for(let s=0;s<Number.MAX_SAFE_INTEGER;s++){let i=path.join(this.#b,`log${s}.log`);try{let r=fs.openSync(i,"wx");return fs.closeSync(r),fs.createWriteStream(i,{flags:"a"})}catch(o){let l=fs.statSync(i);if(l.size<this.#c)return fs.createWriteStream(i,{flags:"a"})}}throw Error("Failed to create a new log file.")}catch(a){throw Error(`Error in log file creation: ${a.message}`)}}#i(h,n){if(!this.#h.includes(h.toLowerCase()))throw Error("Invalid Log Level");let c=this.#g.replace("[type]",h).replace("[date]",new Date().toISOString()).replace("[message]",n.toString());if("file"===this.#a){this.#d.write(c+"\n")||this.#d.once("drain",()=>{console.log("Drained log file stream")});let g=fs.fstatSync(this.#d.fd??0);g.size>=this.#c&&(this.#d.end(),this.#d=this.#f())}else console.log(c)}error(e){this.#i("error",e)}info(e){this.#i("info",e)}debug(e){this.#i("debug",e)}}module.exports=Logger;